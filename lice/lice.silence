# /silence - a more efficient interface
# Written by HSOC, slightly modified to support silence toggle by tjh
# Updated for EPIC5 by tjh
# Updated to support callerid by tjh 06/12

IF (word(2 $loadinfo()) != [pf]) {
  LOAD -pf $word(1 $loadinfo());
  RETURN;
};

PACKAGE LiCe;

ALIAS silence {
  UNLESS (_proc.silence()) {iecho This server does not support silence.; RETURN};
  IF (match($left(1 $0) + -)) {
     @ sil.sign = left(1 $0);
     @ sil.dork = rest(1 $0);
     UNLESS (rmatch($0 *!* *@* *.*)) {
        USERHOST $sil.dork -CMD UNLESS ([$4]==[<UNKNOWN>] || [$4]==[]) {
           //SILENCE $sil.sign*@$4;
           //SILENCE $sil.sign$sil.dork*;
        }{//SILENCE $sil.sign$sil.dork*}
     }{//SILENCE $0}
  }{
  @ sil.cnt = 1;

#   IF ([$0] == '') {@ sil.pers = [$N]} {@ sil.pers = [$0]};
# I'm not happy with this. $N can not be correct, but it *seems* to work.
  @ sil.pers = (@ ? [$0] : [$N]);
  iecho ---- Silence List for $sil.pers@$S;
  ^ON ^271 * {
    @ sil.mask = [$2];
    iecho [$[2]sil.cnt] $sil.mask;
    @sil.cnt++;
  };
  //SILENCE $sil.pers;
  }
};

ON ^272 * {iecho ---- End of Silence List;purge sil};

# Verify server support for silence/callerid
ALIAS _proc.silence {@:FUNCTION_RETURN = (MATCH(SILENCE $serverctl(GET $serverctl(FROM_SERVER) 005s))) > 0): 0 ? 1};
ALIAS _proc.callerid {@:FUNCTION_RETURN = (MATCH(CALLERID $serverctl(GET $serverctl(FROM_SERVER) 005s))) > 0): 0 ? 1}

#tjh/12
